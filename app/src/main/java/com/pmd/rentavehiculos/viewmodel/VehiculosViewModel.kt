package com.pmd.rentavehiculos.viewmodel

import android.os.Build
import android.util.Log
import androidx.annotation.RequiresApi
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.pmd.rentavehiculos.model.Vehiculo
import com.pmd.rentavehiculos.model.Persona
import com.pmd.rentavehiculos.model.RentaRequest
import com.pmd.rentavehiculos.remote.RetrofitClient
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import retrofit2.HttpException
import java.io.IOException
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.Locale

class VehiculosViewModel : ViewModel() {

    private val _vehiculosDisponibles = MutableStateFlow<List<Vehiculo>>(emptyList())
    val vehiculosDisponibles: StateFlow<List<Vehiculo>> = _vehiculosDisponibles

    val rentas = MutableStateFlow<List<RentaRequest>>(emptyList())
    var isLoading = MutableStateFlow(false)

    /**
     * Obtiene la lista de veh√≠culos disponibles desde la API.
     */
    fun obtenerVehiculosDisponibles(apiKey: String) {
        viewModelScope.launch {
            if (apiKey.isBlank()) {
                Log.e("VehiculosViewModel", "‚ùå Error: API Key vac√≠a")
                return@launch
            }

            try {
                Log.d("VehiculosViewModel", "üîë Usando API Key: $apiKey para obtener veh√≠culos disponibles")
                val vehiculosObtenidos = RetrofitClient.vehiculosService.obtenerVehiculos(apiKey, "disponibles")
                _vehiculosDisponibles.value = vehiculosObtenidos
                Log.d("VehiculosViewModel", "‚úÖ Veh√≠culos cargados (${vehiculosObtenidos.size})")
            } catch (e: Exception) {
                Log.e("VehiculosViewModel", "‚ùå Error al obtener veh√≠culos: ${e.message}")
                _vehiculosDisponibles.value = emptyList()
            }
        }
    }


    /**
     * Obtiene los veh√≠culos rentados por un usuario.
     */
    fun obtenerVehiculosRentados(apiKey: String, personaId: Int) {
        viewModelScope.launch {
            if (apiKey.isBlank()) {
                Log.e("VehiculosViewModel", "‚ùå Error: API Key vac√≠a")
                return@launch
            }

            Log.d("VehiculosViewModel", "üîë Usando API Key: $apiKey")

            try {
                val rentasObtenidas = RetrofitClient.vehiculosService.obtenerVehiculosRentados("Bearer $apiKey", personaId)

                rentas.value = emptyList()
                rentas.value = rentasObtenidas
                Log.d("VehiculosViewModel", "‚úÖ Veh√≠culos rentados obtenidos (${rentas.value.size})")

            } catch (e: HttpException) {
                if (e.code() == 403) {
                    Log.e("VehiculosViewModel", "‚ùå API Key inv√°lida, intenta iniciar sesi√≥n nuevamente.")
                } else {
                    Log.e("VehiculosViewModel", "‚ùå Error HTTP ${e.code()} - ${e.response()?.errorBody()?.string()}")
                }
            } catch (e: IOException) {
                Log.e("VehiculosViewModel", "‚ùå Error de conexi√≥n: ${e.message}")
            } catch (e: Exception) {
                Log.e("VehiculosViewModel", "‚ùå Error inesperado: ${e.message}")
            }
        }
    }


    /**
     * Reserva un veh√≠culo para el usuario logueado.
     */
    @RequiresApi(Build.VERSION_CODES.O)
    fun reservarVehiculo(
        apiKey: String?,
        usuario: Persona?,
        vehiculo: Vehiculo,
        diasRenta: Int,
        onResult: (Boolean, String) -> Unit
    ) {
        viewModelScope.launch {
            if (apiKey.isNullOrEmpty()) {
                onResult(false, "Error: API Key inv√°lida")
                return@launch
            }
            if (usuario == null) {
                onResult(false, "Error: Usuario no autenticado")
                return@launch
            }

            val rentasActivas = rentas.value.filter { it.fecha_estimada_entrega.isNullOrEmpty() }
            Log.d("VehiculosViewModel", "üìã Rentas activas del usuario: ${rentasActivas.size}")

            if (rentasActivas.size >= 3) {
                onResult(false, "No puedes rentar m√°s de 3 veh√≠culos")
                return@launch
            }

            try {
                val fechaRenta = obtenerFechaActual()
                val fechaEntrega = obtenerFechaEntrega(diasRenta)

                val rentaRequest = RentaRequest(
                    persona = usuario,
                    vehiculo = vehiculo,
                    dias_renta = diasRenta,
                    valor_total_renta = vehiculo.valor_dia * diasRenta,
                    fecha_renta = fechaRenta,
                    fecha_estimada_entrega = fechaEntrega
                )

                Log.d("VehiculosViewModel", "üì© Enviando solicitud de reserva con API Key: $apiKey")

                val response = RetrofitClient.vehiculosService.reservarVehiculo(apiKey, vehiculo.id, rentaRequest)

                if (response.isSuccessful) {
                    onResult(true, "‚úÖ Reserva exitosa")
                } else {
                    val errorBody = response.errorBody()?.string()
                    onResult(false, "‚ùå Error en la reserva: $errorBody")
                }

            } catch (e: Exception) {
                onResult(false, "Error en la reserva")
            }
        }
    }


    /**
     * Entrega un veh√≠culo rentado.
     */
    @RequiresApi(Build.VERSION_CODES.O)
    fun entregarVehiculo(apiKey: String, vehiculoId: Int, onResult: (Boolean, String) -> Unit) {
        viewModelScope.launch {
            if (apiKey.isBlank()) {
                onResult(false, "Error: apiKey inv√°lida")
                return@launch
            }

            try {
                RetrofitClient.vehiculosService.entregarVehiculo("Bearer $apiKey", vehiculoId)

                val rentaIndex = rentas.value.indexOfFirst { it.vehiculo.id == vehiculoId }
                if (rentaIndex != -1) {
                    val rentaActualizada = rentas.value[rentaIndex].copy(fecha_estimada_entrega = obtenerFechaActual())
                    rentas.value = rentas.value.toMutableList().apply { set(rentaIndex, rentaActualizada) }
                }

                onResult(true, "‚úÖ Veh√≠culo entregado correctamente")

            } catch (e: Exception) {
                Log.e("VehiculosViewModel", "‚ùå Error al entregar veh√≠culo: ${e.message}")
                onResult(false, "Error al entregar veh√≠culo")
            }
        }
    }

    /**
     * Obtiene la fecha actual en el formato correcto.
     */
    @RequiresApi(Build.VERSION_CODES.O)
    private fun obtenerFechaActual(): String {
        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
        return LocalDateTime.now().format(formatter)
    }

    /**
     * Obtiene la fecha de entrega sumando los d√≠as de renta.
     */
    @RequiresApi(Build.VERSION_CODES.O)
    private fun obtenerFechaEntrega(diasRenta: Int): String {
        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
        return LocalDateTime.now().plusDays(diasRenta.toLong()).format(formatter)
    }

    /**
     * Obtiene el historial de rentas de un veh√≠culo (para admins).
     */
    fun obtenerVehiculosRentadosAdmin(apiKey: String, vehiculoId: Int) {
        viewModelScope.launch {
            if (apiKey.isBlank()) {
                Log.e("VehiculosViewModel", "‚ùå API Key vac√≠a o inv√°lida")
                return@launch
            }

            isLoading.value = true
            try {
                Log.d("VehiculosViewModel", "üîÑ Cargando historial de rentas del veh√≠culo $vehiculoId con API Key: $apiKey")
                val rentasObtenidas = RetrofitClient.vehiculosService.obtenerHistorialRentas(apiKey, vehiculoId)
                rentas.value = rentasObtenidas
                Log.d("VehiculosViewModel", "‚úÖ Historial de rentas obtenido (${rentasObtenidas.size})")
            } catch (e: HttpException) {
                if (e.code() == 403) {
                    Log.e("VehiculosViewModel", "‚ùå API Key inv√°lida o sin permisos. Intenta iniciar sesi√≥n nuevamente.")
                } else {
                    Log.e("VehiculosViewModel", "‚ùå Error HTTP ${e.code()} - ${e.response()?.errorBody()?.string()}")
                }
            } catch (e: IOException) {
                Log.e("VehiculosViewModel", "‚ùå Error de conexi√≥n: ${e.message}")
            } catch (e: Exception) {
                Log.e("VehiculosViewModel", "‚ùå Error inesperado: ${e.message}")
            } finally {
                isLoading.value = false
            }
        }
    }


    /**
     * liberar los vehiculos .
     */

    fun liberarVehiculo(apiKey: String, vehiculoId: Int, onResult: (Boolean, String) -> Unit) {
        viewModelScope.launch {
            if (apiKey.isBlank()) {
                onResult(false, "‚ùå Error: API Key inv√°lida")
                return@launch
            }

            try {
                val response = RetrofitClient.vehiculosService.entregarVehiculo(apiKey, vehiculoId)

                if (response.isSuccessful) {
                    Log.d("VehiculosViewModel", "‚úÖ Veh√≠culo liberado correctamente")

                    // Recargar lista de veh√≠culos disponibles
                    obtenerVehiculosDisponibles(apiKey)

                    onResult(true, "‚úÖ Veh√≠culo liberado correctamente")
                } else {
                    val errorBody = response.errorBody()?.string()
                    Log.e("VehiculosViewModel", "‚ùå Error al liberar veh√≠culo: $errorBody")
                    onResult(false, "‚ùå Error al liberar veh√≠culo: $errorBody")
                }

            } catch (e: HttpException) {
                Log.e("VehiculosViewModel", "‚ùå Error HTTP ${e.code()} - ${e.response()?.errorBody()?.string()}")
                onResult(false, "‚ùå Error HTTP ${e.code()}")
            } catch (e: IOException) {
                Log.e("VehiculosViewModel", "‚ùå Error de conexi√≥n con el servidor")
                onResult(false, "‚ùå Error de conexi√≥n con el servidor")
            } catch (e: Exception) {
                Log.e("VehiculosViewModel", "‚ùå Error desconocido: ${e.message}")
                onResult(false, "‚ùå Error desconocido")
            }
        }
    }


}
